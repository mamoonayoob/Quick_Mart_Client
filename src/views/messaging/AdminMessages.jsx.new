import React, { useState, useEffect, useRef } from 'react';
import { 
  Container, 
  Row, 
  Col, 
  Card, 
  Tabs, 
  Tab, 
  Button, 
  Form,
  ListGroup,
  Alert,
  Badge,
  InputGroup,
  Spinner
} from 'react-bootstrap';
import { useNavigate, useParams } from 'react-router-dom';
import { BsChat, BsPerson, BsSearch, BsSend, BsShop, BsTruck, BsShield } from 'react-icons/bs';
import { toast } from 'react-toastify';
import './WhatsAppMessages.css'; // Shared CSS for WhatsApp-style messages

const AdminMessages = () => {
  // State for users and messages
  const [customers, setCustomers] = useState([]);
  const [vendors, setVendors] = useState([]);
  const [deliveryUsers, setDeliveryUsers] = useState([]);
  const [selectedUser, setSelectedUser] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  
  // Loading states
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('customers');
  const [usersLoading, setUsersLoading] = useState(true);
  const [messagesLoading, setMessagesLoading] = useState(false);
  const [error, setError] = useState(null);
  
  // Refs for scrolling
  const messagesEndRef = useRef(null);
  const chatContainerRef = useRef(null);
  
  // Get current admin ID
  const currentUserId = JSON.parse(localStorage.getItem('user'))?.id;
  const navigate = useNavigate();
  const { userId } = useParams(); // In case we navigate from a user page

  // API functions
  const fetchCustomers = async () => {
    try {
      setUsersLoading(true);
      const response = await fetch('/api/messages/customers/directory', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      const data = await response.json();
      if (data.success) {
        setCustomers(data.data);
      } else {
        toast.error('Failed to load customers');
      }
    } catch (error) {
      console.error('Error fetching customers:', error);
      toast.error('Error loading customers');
    } finally {
      setUsersLoading(false);
    }
  };

  const fetchVendors = async () => {
    try {
      setUsersLoading(true);
      const response = await fetch('/api/messages/vendors/directory', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      const data = await response.json();
      if (data.success) {
        setVendors(data.data);
      } else {
        toast.error('Failed to load vendors');
      }
    } catch (error) {
      console.error('Error fetching vendors:', error);
      toast.error('Error loading vendors');
    } finally {
      setUsersLoading(false);
    }
  };

  const fetchDeliveryUsers = async () => {
    try {
      setUsersLoading(true);
      const response = await fetch('/api/messages/delivery/directory', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      const data = await response.json();
      if (data.success) {
        setDeliveryUsers(data.data);
      } else {
        toast.error('Failed to load delivery users');
      }
    } catch (error) {
      console.error('Error fetching delivery users:', error);
      toast.error('Error loading delivery users');
    } finally {
      setUsersLoading(false);
    }
  };

  const fetchMessages = async (userId, userRole) => {
    if (!userId) return;
    
    try {
      setMessagesLoading(true);
      const response = await fetch(`/api/messages/conversation/${userId}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      const data = await response.json();
      if (data.success) {
        setMessages(data.data);
      } else {
        toast.error('Failed to load messages');
      }
    } catch (error) {
      console.error('Error fetching messages:', error);
      toast.error('Error loading messages');
    } finally {
      setMessagesLoading(false);
    }
  };

  // Load users based on active tab
  useEffect(() => {
    if (activeTab === 'customers') {
      fetchCustomers();
    } else if (activeTab === 'vendors') {
      fetchVendors();
    } else if (activeTab === 'delivery') {
      fetchDeliveryUsers();
    }
  }, [activeTab]);

  // Load messages when a user is selected
  useEffect(() => {
    if (selectedUser) {
      fetchMessages(selectedUser.id, selectedUser.role);
    }
  }, [selectedUser]);

  // Auto-scroll to bottom of messages
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  // If we have a userId from the URL, select that user
  useEffect(() => {
    if (userId) {
      // Determine which tab to set based on the user ID format or other logic
      const fetchUserDetails = async () => {
        try {
          // Try to find the user in each category
          let foundUser = null;
          
          // Check customers first
          await fetchCustomers();
          foundUser = customers.find(c => c.id === userId);
          if (foundUser) {
            setActiveTab('customers');
            setSelectedUser({ ...foundUser, role: 'customer' });
            return;
          }
          
          // Check vendors
          await fetchVendors();
          foundUser = vendors.find(v => v.id === userId);
          if (foundUser) {
            setActiveTab('vendors');
            setSelectedUser({ ...foundUser, role: 'vendor' });
            return;
          }
          
          // Check delivery users
          await fetchDeliveryUsers();
          foundUser = deliveryUsers.find(d => d.id === userId);
          if (foundUser) {
            setActiveTab('delivery');
            setSelectedUser({ ...foundUser, role: 'delivery' });
            return;
          }
          
          // If not found in any category
          toast.error('User not found');
        } catch (error) {
          console.error('Error finding user:', error);
          toast.error('Error loading user details');
        }
      };
      
      fetchUserDetails();
    }
  }, [userId, customers, vendors, deliveryUsers]);

  // Handle sending a message
  const handleSendMessage = async () => {
    if (!selectedUser || !newMessage.trim()) return;
    
    setLoading(true);
    
    try {
      let endpoint = '';
      let body = {};
      
      // Determine the correct endpoint based on the selected user's role
      if (selectedUser.role === 'customer') {
        endpoint = '/api/messages/admin-to-customer/general';
        body = {
          customerId: selectedUser.id,
          content: newMessage
        };
      } else if (selectedUser.role === 'vendor') {
        endpoint = '/api/messages/admin-to-vendor/general';
        body = {
          vendorId: selectedUser.id,
          content: newMessage
        };
      } else if (selectedUser.role === 'delivery') {
        endpoint = '/api/messages/admin-to-delivery/general';
        body = {
          deliveryId: selectedUser.id,
          content: newMessage
        };
      }
      
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify(body)
      });
      
      const data = await response.json();
      
      if (data.success) {
        setNewMessage('');
        // Add the new message to the messages list
        fetchMessages(selectedUser.id, selectedUser.role);
        toast.success('Message sent successfully');
      } else {
        toast.error(data.message || 'Failed to send message');
      }
    } catch (error) {
      console.error('Error sending message:', error);
      toast.error('Error sending message');
    } finally {
      setLoading(false);
    }
  };
  
  // Handle tab change
  const handleTabChange = (tab) => {
    setActiveTab(tab);
    setSelectedUser(null);
  };
  
  // Handle user selection
  const handleUserSelect = (user) => {
    setSelectedUser({ ...user, role: activeTab === 'customers' ? 'customer' : activeTab === 'vendors' ? 'vendor' : 'delivery' });
  };
  
  // Filter users based on search term
  const getFilteredUsers = () => {
    let users = [];
    
    if (activeTab === 'customers') {
      users = customers;
    } else if (activeTab === 'vendors') {
      users = vendors;
    } else if (activeTab === 'delivery') {
      users = deliveryUsers;
    }
    
    if (!searchTerm) return users;
    
    return users.filter(user => {
      const name = user.name || user.businessName || '';
      return name.toLowerCase().includes(searchTerm.toLowerCase());
    });
  };
  
  // Handle key press in message input
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Determine if a message is from the admin (current user)
  const isAdminMessage = (message) => {
    return message.senderId === currentUserId || message.senderType === 'admin';
  };

  // Get appropriate user name display
  const getUserDisplayName = (user) => {
    if (!user) return '';
    
    if (user.role === 'vendor') {
      return user.businessName || user.name || 'Vendor';
    }
    
    return user.name || 'User';
  };

  // Get appropriate icon for user type
  const getUserIcon = (userRole) => {
    switch (userRole) {
      case 'customer':
        return <BsPerson className="me-2" />;
      case 'vendor':
        return <BsShop className="me-2" />;
      case 'delivery':
        return <BsTruck className="me-2" />;
      case 'admin':
        return <BsShield className="me-2" />;
      default:
        return <BsChat className="me-2" />;
    }
  };

  // Get appropriate badge color for user type
  const getUserBadgeVariant = (userRole) => {
    switch (userRole) {
      case 'customer':
        return 'primary';
      case 'vendor':
        return 'success';
      case 'delivery':
        return 'warning';
      case 'admin':
        return 'danger';
      default:
        return 'secondary';
    }
  };

  const filteredUsers = getFilteredUsers();

  return (
    <Container fluid className="py-4">
      <Row>
        <Col md={4} lg={3} className="mb-4 mb-md-0">
          <Card className="h-100">
            <Card.Header className="bg-primary text-white">
              <h5 className="mb-0">
                <BsChat className="me-2" /> Admin Messaging
              </h5>
            </Card.Header>
            
            <Tabs
              activeKey={activeTab}
              onSelect={handleTabChange}
              className="mb-0"
              fill
            >
              <Tab 
                eventKey="customers" 
                title={
                  <span>
                    <BsPerson className="me-1" /> Customers
                  </span>
                }
              >
                <Card.Body className="p-0 border-top-0">
                  <div className="p-2">
                    <InputGroup>
                      <Form.Control
                        placeholder="Search customers..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                      />
                      <Button variant="outline-secondary">
                        <BsSearch />
                      </Button>
                    </InputGroup>
                  </div>
                  
                  <ListGroup variant="flush" className="user-list">
                    {usersLoading ? (
                      <div className="text-center py-4">
                        <Spinner animation="border" variant="primary" />
                      </div>
                    ) : filteredUsers.length === 0 ? (
                      <Alert variant="info" className="m-2">
                        No customers found
                      </Alert>
                    ) : (
                      filteredUsers.map(user => (
                        <ListGroup.Item
                          key={user.id}
                          action
                          active={selectedUser?.id === user.id}
                          onClick={() => handleUserSelect(user)}
                          className="d-flex align-items-center"
                        >
                          <div className="user-avatar me-2">
                            {user.name?.charAt(0).toUpperCase() || 'C'}
                          </div>
                          <div className="flex-grow-1">
                            <div className="d-flex justify-content-between align-items-center">
                              <div className="fw-bold">{user.name || 'Customer'}</div>
                              <Badge bg="primary" pill>Customer</Badge>
                            </div>
                            <div className="small text-muted">
                              {user.email || 'No email'}
                            </div>
                          </div>
                        </ListGroup.Item>
                      ))
                    )}
                  </ListGroup>
                </Card.Body>
              </Tab>
              
              <Tab 
                eventKey="vendors" 
                title={
                  <span>
                    <BsShop className="me-1" /> Vendors
                  </span>
                }
              >
                <Card.Body className="p-0 border-top-0">
                  <div className="p-2">
                    <InputGroup>
                      <Form.Control
                        placeholder="Search vendors..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                      />
                      <Button variant="outline-secondary">
                        <BsSearch />
                      </Button>
                    </InputGroup>
                  </div>
                  
                  <ListGroup variant="flush" className="user-list">
                    {usersLoading ? (
                      <div className="text-center py-4">
                        <Spinner animation="border" variant="success" />
                      </div>
                    ) : filteredUsers.length === 0 ? (
                      <Alert variant="info" className="m-2">
                        No vendors found
                      </Alert>
                    ) : (
                      filteredUsers.map(user => (
                        <ListGroup.Item
                          key={user.id}
                          action
                          active={selectedUser?.id === user.id}
                          onClick={() => handleUserSelect(user)}
                          className="d-flex align-items-center"
                        >
                          <div className="user-avatar me-2 bg-success">
                            {(user.businessName || user.name)?.charAt(0).toUpperCase() || 'V'}
                          </div>
                          <div className="flex-grow-1">
                            <div className="d-flex justify-content-between align-items-center">
                              <div className="fw-bold">{user.businessName || user.name || 'Vendor'}</div>
                              <Badge bg="success" pill>Vendor</Badge>
                            </div>
                            <div className="small text-muted">
                              {user.email || 'No email'}
                            </div>
                          </div>
                        </ListGroup.Item>
                      ))
                    )}
                  </ListGroup>
                </Card.Body>
              </Tab>
              
              <Tab 
                eventKey="delivery" 
                title={
                  <span>
                    <BsTruck className="me-1" /> Delivery
                  </span>
                }
              >
                <Card.Body className="p-0 border-top-0">
                  <div className="p-2">
                    <InputGroup>
                      <Form.Control
                        placeholder="Search delivery users..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                      />
                      <Button variant="outline-secondary">
                        <BsSearch />
                      </Button>
                    </InputGroup>
                  </div>
                  
                  <ListGroup variant="flush" className="user-list">
                    {usersLoading ? (
                      <div className="text-center py-4">
                        <Spinner animation="border" variant="warning" />
                      </div>
                    ) : filteredUsers.length === 0 ? (
                      <Alert variant="info" className="m-2">
                        No delivery users found
                      </Alert>
                    ) : (
                      filteredUsers.map(user => (
                        <ListGroup.Item
                          key={user.id}
                          action
                          active={selectedUser?.id === user.id}
                          onClick={() => handleUserSelect(user)}
                          className="d-flex align-items-center"
                        >
                          <div className="user-avatar me-2 bg-warning">
                            {user.name?.charAt(0).toUpperCase() || 'D'}
                          </div>
                          <div className="flex-grow-1">
                            <div className="d-flex justify-content-between align-items-center">
                              <div className="fw-bold">{user.name || 'Delivery Person'}</div>
                              <Badge bg="warning" text="dark" pill>Delivery</Badge>
                            </div>
                            <div className="small text-muted">
                              {user.email || 'No email'}
                            </div>
                          </div>
                        </ListGroup.Item>
                      ))
                    )}
                  </ListGroup>
                </Card.Body>
              </Tab>
            </Tabs>
          </Card>
        </Col>
        
        <Col md={8} lg={9}>
          <Card className="h-100">
            {selectedUser ? (
              <>
                <Card.Header className={`d-flex align-items-center ${
                  selectedUser.role === 'customer' ? 'bg-primary' : 
                  selectedUser.role === 'vendor' ? 'bg-success' : 
                  'bg-warning'
                } text-white`}>
                  <div className="user-avatar me-2">
                    {getUserDisplayName(selectedUser).charAt(0).toUpperCase()}
                  </div>
                  <div className="flex-grow-1">
                    <h5 className="mb-0">{getUserDisplayName(selectedUser)}</h5>
                    <div className="small">
                      <Badge 
                        bg={getUserBadgeVariant(selectedUser.role)} 
                        className="me-2"
                        style={{ opacity: 0.8 }}
                      >
                        {selectedUser.role.charAt(0).toUpperCase() + selectedUser.role.slice(1)}
                      </Badge>
                      {selectedUser.email}
                    </div>
                  </div>
                </Card.Header>
                
                <Card.Body className="p-0 d-flex flex-column">
                  <div 
                    className="chat-messages p-3 flex-grow-1"
                    style={{ overflowY: 'auto', maxHeight: 'calc(100vh - 300px)' }}
                    ref={chatContainerRef}
                  >
                    {messagesLoading ? (
                      <div className="text-center py-4">
                        <Spinner animation="border" variant="primary" />
                      </div>
                    ) : messages.length === 0 ? (
                      <Alert variant="info" className="text-center">
                        No messages yet. Start the conversation!
                      </Alert>
                    ) : (
                      messages.map((message, index) => {
                        const isAdmin = isAdminMessage(message);
                        return (
                          <div 
                            key={message._id || index}
                            className={`d-flex ${isAdmin ? 'justify-content-end' : 'justify-content-start'} mb-2`}
                          >
                            <div 
                              className={`message-bubble ${isAdmin ? 'admin-message' : 'user-message'}`}
                              style={{
                                backgroundColor: isAdmin ? '#0d6efd' : '#f0f0f0',
                                color: isAdmin ? 'white' : 'black',
                                borderRadius: '18px',
                                padding: '10px 15px',
                                maxWidth: '70%',
                                position: 'relative'
                              }}
                            >
                              <div>{message.content}</div>
                              <div className="small text-end" style={{ opacity: 0.8 }}>
                                {new Date(message.createdAt).toLocaleTimeString()}
                              </div>
                            </div>
                          </div>
                        );
                      })
                    )}
                    <div ref={messagesEndRef} />
                  </div>
                  
                  <div className="p-3 border-top">
                    <InputGroup>
                      <Form.Control
                        as="textarea"
                        placeholder="Type a message..."
                        value={newMessage}
                        onChange={(e) => setNewMessage(e.target.value)}
                        onKeyPress={handleKeyPress}
                        style={{ resize: 'none', height: '50px' }}
                      />
                      <Button 
                        variant="primary" 
                        onClick={handleSendMessage}
                        disabled={loading || !newMessage.trim()}
                      >
                        {loading ? (
                          <Spinner animation="border" size="sm" />
                        ) : (
                          <BsSend />
                        )}
                      </Button>
                    </InputGroup>
                  </div>
                </>
              ) : (
                <Card.Body className="text-center p-5">
                  <BsChat size={50} className="text-muted mb-3" />
                  <h4>Admin Messaging System</h4>
                  <p className="text-muted">
                    Select a user from the left sidebar to start messaging.
                  </p>
                </Card.Body>
              )}
            </Card>
          </Col>
      </Row>
    </Container>
  );
};

export default AdminMessages;
