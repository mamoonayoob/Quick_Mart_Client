import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import socketService from '../services/socketService';
import messageService from '../services/messageService';
import notificationService from '../services/notificationService';
import firebaseMessagingService from '../services/firebaseMessagingService';
import { useAuth } from './AuthContext'; // Assuming you have an auth context with user info

const MessageContext = createContext();

export const useMessages = () => useContext(MessageContext);

export const MessageProvider = ({ children }) => {
  const { user } = useAuth(); // Assuming you have an auth context with user info
  const [messages, setMessages] = useState([]);
  const [customerMessages, setCustomerMessages] = useState([]);
  const [vendorMessages, setVendorMessages] = useState([]);
  const [adminMessages, setAdminMessages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [unreadCount, setUnreadCount] = useState(0);
  const [activeConversation, setActiveConversation] = useState(null);
  const [notifications, setNotifications] = useState([]);
  const [notificationLoading, setNotificationLoading] = useState(false);

  // Send message function
  const sendMessage = useCallback(async (messageData) => {
    try {
      const response = await messageService.sendMessage(messageData);
      return response.data;
    } catch (error) {
      setError('Failed to send message');
      console.error('Error sending message:', error);
      return null;
    }
  }, []);

  // Send broadcast message (admin only)
  const sendBroadcastMessage = useCallback(async (message) => {
    try {
      const response = await messageService.sendBroadcastMessage(message);
      return response.data;
    } catch (error) {
      setError('Failed to send broadcast message');
      console.error('Error sending broadcast message:', error);
      return null;
    }
  }, []);

  // Mark message as read
  const markMessageAsRead = useCallback(async (messageId) => {
    try {
      await messageService.markAsRead(messageId);
      
      // Update local state
      setMessages(prev => 
        prev.map(msg => 
          msg._id === messageId ? { ...msg, isRead: true } : msg
        )
      );
      
      // Update unread count
      setUnreadCount(prev => Math.max(0, prev - 1));
      
      return true;
    } catch (error) {
      console.error('Error marking message as read:', error);
      return false;
    }
  }, []);

  // Fetch customer messages
  const fetchCustomerMessages = useCallback(async () => {
    if (!user) return [];
    
    setLoading(true);
    setError(null);
    
    try {
      const response = await messageService.getCustomerMessages();
      setCustomerMessages(response.data || []);
      return response.data;
    } catch (error) {
      setError('Failed to fetch customer messages');
      console.error('Error fetching customer messages:', error);
      return [];
    } finally {
      setLoading(false);
    }
  }, [user]);

  // Fetch vendor messages
  const fetchVendorMessages = useCallback(async () => {
    if (!user) return [];
    
    setLoading(true);
    setError(null);
    
    try {
      const response = await messageService.getVendorMessages();
      setVendorMessages(response.data || []);
      return response.data;
    } catch (error) {
      setError('Failed to fetch vendor messages');
      console.error('Error fetching vendor messages:', error);
      return [];
    } finally {
      setLoading(false);
    }
  }, [user]);

  // Fetch admin messages
  const fetchAdminMessages = useCallback(async () => {
    if (!user) return [];
    
    setLoading(true);
    setError(null);
    
    try {
      const response = await messageService.getAdminMessages();
      setAdminMessages(response.data || []);
      return response.data;
    } catch (error) {
      setError('Failed to fetch admin messages');
      console.error('Error fetching admin messages:', error);
      return [];
    } finally {
      setLoading(false);
    }
  }, [user]);

  // Fetch messages based on user role
  const fetchMessages = useCallback(async () => {
    if (!user) return;
    
    setLoading(true);
    setError(null);
    
    try {
      let response;
      
      if (user.role === 'customer') {
        response = await messageService.getCustomerMessages();
        setCustomerMessages(response.data || []);
      } else if (user.role === 'vendor') {
        response = await messageService.getVendorMessages();
        setVendorMessages(response.data || []);
      } else if (user.role === 'admin') {
        response = await messageService.getAdminMessages();
        setAdminMessages(response.data || []);
      }
      
      if (response && response.data) {
        setMessages(response.data);
      }
    } catch (err) {
      setError('Failed to fetch messages');
      console.error('Error fetching messages:', err);
    } finally {
      setLoading(false);
    }
  }, [user]);

  // Fetch unread message count
  const fetchUnreadCount = useCallback(async () => {
    if (!user) return;
    
    try {
      const count = await messageService.getUnreadCount();
      setUnreadCount(count);
    } catch (error) {
      console.error('Error fetching unread count:', error);
    }
  }, [user]);
  
  // Fetch notifications
  const fetchNotifications = useCallback(async (params = {}) => {
    if (!user) return { notifications: [] };
    
    setNotificationLoading(true);
    try {
      const data = await notificationService.getNotifications(params);
      setNotifications(data.notifications || []);
      return data;
    } catch (error) {
      console.error('Error fetching notifications:', error);
      return { notifications: [] };
    } finally {
      setNotificationLoading(false);
    }
  }, [user]);
  
  // Mark notification as read
  const markNotificationAsRead = useCallback(async (notificationId) => {
    try {
      await notificationService.markAsRead(notificationId);
      
      // Update local state
      setNotifications(prev => 
        prev.map(notification => 
          notification._id === notificationId 
            ? { ...notification, isRead: true } 
            : notification
        )
      );
      
      // Refresh unread count
      fetchUnreadCount();
      
      return true;
    } catch (error) {
      console.error('Error marking notification as read:', error);
      return false;
    }
  }, [fetchUnreadCount]);
  
  // Mark all notifications as read
  const markAllNotificationsAsRead = useCallback(async () => {
    try {
      await notificationService.markAllAsRead();
      
      // Update local state
      setNotifications(prev => 
        prev.map(notification => ({ ...notification, isRead: true }))
      );
      
      // Reset unread count
      setUnreadCount(0);
      
      return true;
    } catch (error) {
      console.error('Error marking all notifications as read:', error);
      return false;
    }
  }, []);

  // Initialize socket connection and event listeners
  useEffect(() => {
    if (!user) return;

    // Connect to socket
    socketService.connect();

    // Listen for new messages
    socketService.onNewMessage((message) => {
      // Update messages state with new message
      setMessages(prevMessages => [...prevMessages, message]);
      
      // Update unread count if message is not from current user
      if (message.senderId !== user.id) {
        setUnreadCount(prev => prev + 1);
      }
    });

    // Listen for read receipts
    socketService.onMessageRead((data) => {
      // Update message read status
      setMessages(prevMessages => 
        prevMessages.map(msg => 
          msg.id === data.messageId ? { ...msg, read: true } : msg
        )
      );
    });
    
    // Listen for new notifications
    socketService.on('notification', (notification) => {
      // Add new notification to state
      setNotifications(prev => [notification, ...prev]);
      
      // Update unread count
      if (!notification.isRead) {
        setUnreadCount(prev => prev + 1);
      }
    });

    // Initialize Firebase messaging
    firebaseMessagingService.init();

    // Listen for Firebase notifications
    const unsubscribe = firebaseMessagingService.onMessage((payload) => {
      // Handle foreground notification
      console.log('Received foreground message:', payload);
      
      // Update unread count
      setUnreadCount(prev => prev + 1);
      
      // Add notification to state if it has the right format
      if (payload.notification) {
        const newNotification = {
          _id: payload.data?.notificationId || Date.now().toString(),
          title: payload.notification.title,
          content: payload.notification.body,
          createdAt: new Date().toISOString(),
          isRead: false,
          type: payload.data?.type || 'message',
          link: payload.data?.link || null,
          sender: payload.data?.senderId ? {
            _id: payload.data.senderId,
            name: payload.data.senderName || 'Unknown'  
          } : null
        };
        
        setNotifications(prev => [newNotification, ...prev]);
      }
    });

    // Clean up
    return () => {
      socketService.disconnect();
      unsubscribe();
    };
  }, [user]);

  // Fetch notifications on initial load
  useEffect(() => {
    if (user) {
      fetchNotifications({ limit: 10 });
    }
  }, [user, fetchNotifications]);

  // Fetch messages and unread count on initial load
  useEffect(() => {
    if (user) {
      fetchMessages();
      fetchUnreadCount();
    }
  }, [user, fetchMessages, fetchUnreadCount]);

  // Provide context value
  const value = {
    messages,
    customerMessages,
    vendorMessages,
    adminMessages,
    loading,
    error,
    unreadCount,
    activeConversation,
    setActiveConversation,
    sendMessage,
    sendBroadcastMessage,
    fetchMessages,
    fetchCustomerMessages,
    fetchVendorMessages,
    fetchAdminMessages,
    fetchUnreadCount,
    markMessageAsRead,
    // Notification related
    notifications,
    notificationLoading,
    fetchNotifications,
    markNotificationAsRead,
    markAllNotificationsAsRead,
  };

  return (
    <MessageContext.Provider value={value}>
      {children}
    </MessageContext.Provider>
  );
};

export default MessageContext;
