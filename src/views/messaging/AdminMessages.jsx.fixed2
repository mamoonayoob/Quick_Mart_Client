import React, { useState, useEffect, useRef } from 'react';
import { 
  Container, 
  Row, 
  Col, 
  Card, 
  Tabs, 
  Tab, 
  Button, 
  Form,
  ListGroup,
  Alert,
  Badge,
  InputGroup,
  Spinner
} from 'react-bootstrap';
import { useNavigate, useParams } from 'react-router-dom';
import { BsChat, BsPerson, BsSearch, BsSend, BsShop, BsTruck, BsShield } from 'react-icons/bs';
import { toast } from 'react-toastify';
import './WhatsAppMessages.css'; // Shared CSS for WhatsApp-style messages

const AdminMessages = () => {
  // State for users and messages
  const [allUsers, setAllUsers] = useState({
    vendors: [],
    customers: [],
    delivery: []
  });
  const [selectedUser, setSelectedUser] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  
  // Loading states
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('customers');
  const [usersLoading, setUsersLoading] = useState(true);
  const [messagesLoading, setMessagesLoading] = useState(false);
  const [error, setError] = useState(null);
  
  // Refs for scrolling and intervals
  const messagesEndRef = useRef(null);
  const chatContainerRef = useRef(null);
  const messageRefreshInterval = useRef(null);
  const userRefreshInterval = useRef(null);
  
  // Get current admin ID
  const currentUserId = JSON.parse(localStorage.getItem('user'))?.id;
  const navigate = useNavigate();
  const { userId } = useParams(); // In case we navigate from a user page

  // Get auth token
  const getAuthToken = () => {
    return localStorage.getItem('token');
  };

  // Scroll to bottom of messages
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Initialize data and set up intervals
  useEffect(() => {
    fetchAllUsers();
    
    // Set up user refresh interval (every 30 seconds)
    userRefreshInterval.current = setInterval(() => {
      console.log('Polling for all user list updates...');
      fetchAllUsers();
    }, 30000);

    return () => {
      if (messageRefreshInterval.current) {
        clearInterval(messageRefreshInterval.current);
      }
      if (userRefreshInterval.current) {
        clearInterval(userRefreshInterval.current);
      }
    };
  }, []);

  // Set up message refresh when user is selected
  useEffect(() => {
    if (selectedUser) {
      fetchMessages(selectedUser._id);
      
      // Set up message refresh interval (every 3 seconds)
      messageRefreshInterval.current = setInterval(() => {
        fetchMessages(selectedUser._id);
      }, 3000);
    } else {
      if (messageRefreshInterval.current) {
        clearInterval(messageRefreshInterval.current);
      }
    }

    return () => {
      if (messageRefreshInterval.current) {
        clearInterval(messageRefreshInterval.current);
      }
    };
  }, [selectedUser]);

  // Fetch all user types (vendors, customers, delivery)
  const fetchAllUsers = async () => {
    try {
      setUsersLoading(true);
      console.log('👥 [ADMIN] Fetching all users for universal messaging...');
      const token = getAuthToken();
      
      // Fetch vendors
      const vendorsResponse = await fetch('https://nextgenretail.site/quickmart/api/messages/vendors/directory', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      const vendorsData = await vendorsResponse.json();
      
      // Fetch customers
      const customersResponse = await fetch('https://nextgenretail.site/quickmart/api/messages/customers/directory', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      const customersData = await customersResponse.json();
      
      // Fetch delivery users
      const deliveryResponse = await fetch('https://nextgenretail.site/quickmart/api/messages/delivery/directory', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      const deliveryData = await deliveryResponse.json();
      
      console.log('📊 [ADMIN] All users response:', {
        vendors: vendorsData.success ? vendorsData.data?.length : 0,
        customers: customersData.success ? customersData.data?.length : 0,
        delivery: deliveryData.success ? deliveryData.data?.length : 0
      });
      
      // Explicitly set roles for each user type
      const vendors = vendorsData.success ? vendorsData.data.map(vendor => ({
        ...vendor,
        role: 'vendor'
      })) : [];
      
      const customers = customersData.success ? customersData.data.map(customer => ({
        ...customer,
        role: 'customer'
      })) : [];
      
      const delivery = deliveryData.success ? deliveryData.data.map(delivery => ({
        ...delivery,
        role: 'delivery'
      })) : [];
      
      // Update state with all user types with explicit roles
      setAllUsers({
        vendors,
        customers,
        delivery
      });
      
      console.log('✅ [ADMIN] Loaded all users with explicit roles:', {
        vendors: vendors.length,
        customers: customers.length,
        delivery: delivery.length
      });
    } catch (error) {
      console.error('❌ [ADMIN] Error fetching users:', error);
      toast.error('Error loading users');
      setAllUsers({ vendors: [], customers: [], delivery: [] });
    } finally {
      setUsersLoading(false);
    }
  };

  // Fetch conversation messages with selected user
  const fetchMessages = async (userId) => {
    if (!userId) return;
    
    try {
      setMessagesLoading(true);
      console.log('📨 [ADMIN] Fetching messages with user:', userId);
      const token = getAuthToken();
      
      const response = await fetch(`https://nextgenretail.site/quickmart/api/messages/conversation/${userId}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      const data = await response.json();
      console.log('📨 [ADMIN] Messages response:', data);
      
      if (data.success) {
        setMessages(data.data || []);
        console.log('✅ [ADMIN] Loaded messages:', data.data?.length || 0);
      } else {
        console.error('❌ [ADMIN] Failed to fetch messages:', data.message);
        setMessages([]);
      }
    } catch (error) {
      console.error('❌ [ADMIN] Error fetching messages:', error);
      setMessages([]);
    } finally {
      setMessagesLoading(false);
    }
  };

  // Send message to selected user (vendor, customer, or delivery)
  const sendMessage = async () => {
    if (!selectedUser || !newMessage.trim()) {
      toast.error('Please select a user and enter a message');
      return;
    }

    try {
      setLoading(true);
      console.log('📤 [ADMIN] Sending message to user:', {
        userId: selectedUser._id,
        userName: selectedUser.businessName || selectedUser.name,
        userRole: selectedUser.role,
        content: newMessage.trim()
      });

      const token = getAuthToken();
      
      if (!selectedUser.role) {
        console.error('❌ [ADMIN] User role is undefined:', selectedUser);
        toast.error('User role is undefined. Please try selecting the user again.');
        setLoading(false);
        return;
      }
      
      // Use direct API endpoints for better compatibility
      let endpoint = '';
      const requestBody = {
        content: newMessage.trim()
      };
      
      // Set endpoint and request body based on recipient role
      if (selectedUser.role === 'vendor') {
        endpoint = 'https://nextgenretail.site/quickmart/api/messages/admin-to-vendor/general';
        requestBody.vendorId = selectedUser._id;
      } else if (selectedUser.role === 'customer') {
        endpoint = 'https://nextgenretail.site/quickmart/api/messages/admin-to-customer/general';
        requestBody.customerId = selectedUser._id;
      } else if (selectedUser.role === 'delivery') {
        endpoint = 'https://nextgenretail.site/quickmart/api/messages/admin-to-delivery/general';
        requestBody.deliveryId = selectedUser._id;
      } else {
        toast.error(`Invalid recipient role: ${selectedUser.role}`);
        setLoading(false);
        return;
      }
      
      console.log('📤 [ADMIN] Sending message to endpoint:', endpoint, requestBody);
      
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      });
      
      const data = await response.json();
      console.log('📤 [ADMIN] Message send response:', data);
      
      if (data.success) {
        setNewMessage('');
        fetchMessages(selectedUser._id);
        toast.success('Message sent successfully');
      } else {
        console.error('❌ [ADMIN] Failed to send message:', data.message);
        toast.error(data.message || 'Failed to send message');
      }
    } catch (error) {
      console.error('❌ [ADMIN] Error sending message:', error);
      toast.error('Error sending message');
    } finally {
      setLoading(false);
    }
  };
  
  // Handle tab change
  const handleTabChange = (tab) => {
    setActiveTab(tab);
    setSelectedUser(null);
  };
  
  // Handle user selection
  const handleUserSelect = (user) => {
    console.log('👤 [ADMIN] Selected user:', user);
    setSelectedUser(user);
  };
  
  // Filter users based on search term
  const getFilteredUsers = () => {
    let users = [];
    
    if (activeTab === 'customers') {
      users = allUsers.customers;
    } else if (activeTab === 'vendors') {
      users = allUsers.vendors;
    } else if (activeTab === 'delivery') {
      users = allUsers.delivery;
    }
    
    if (!searchTerm) return users;
    
    return users.filter(user => {
      const name = user.name || user.businessName || '';
      const email = user.email || '';
      const searchLower = searchTerm.toLowerCase();
      
      return name.toLowerCase().includes(searchLower) || 
             email.toLowerCase().includes(searchLower);
    });
  };
  
  // Handle key press in message input
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  // Determine if a message is from the admin (current user)
  const isAdminMessage = (message) => {
    return message.senderId === currentUserId;
  };

  // Get appropriate user name display
  const getUserDisplayName = (user) => {
    if (user.role === 'vendor') {
      return user.businessName || user.name || 'Vendor';
    } else if (user.role === 'customer') {
      return user.name || 'Customer';
    } else if (user.role === 'delivery') {
      return user.name || 'Delivery User';
    }
    return user.name || 'User';
  };

  // Get appropriate icon for user type
  const getUserIcon = (userRole) => {
    switch (userRole) {
      case 'customer':
        return <BsPerson />;
      case 'vendor':
        return <BsShop />;
      case 'delivery':
        return <BsTruck />;
      case 'admin':
        return <BsShield />;
      default:
        return <BsPerson />;
    }
  };

  // Get appropriate badge color for user type
  const getUserBadgeVariant = (userRole) => {
    switch (userRole) {
      case 'customer':
        return 'primary';
      case 'vendor':
        return 'success';
      case 'delivery':
        return 'warning';
      case 'admin':
        return 'danger';
      default:
        return 'secondary';
    }
  };

  return (
    <Container fluid className="py-4">
      <h2 className="mb-4">Admin Messaging System</h2>
      
      <Row>
        <Col md={4} lg={3}>
          <Card className="mb-4">
            <Card.Header>
              <Tabs
                activeKey={activeTab}
                onSelect={handleTabChange}
                className="mb-2"
              >
                <Tab eventKey="customers" title="Customers" />
                <Tab eventKey="vendors" title="Vendors" />
                <Tab eventKey="delivery" title="Delivery" />
              </Tabs>
              
              <InputGroup className="mt-2">
                <InputGroup.Text>
                  <BsSearch />
                </InputGroup.Text>
                <Form.Control
                  placeholder={`Search ${activeTab}...`}
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </InputGroup>
            </Card.Header>
            
            <Card.Body className="p-0">
              {usersLoading ? (
                <div className="text-center py-4">
                  <Spinner animation="border" variant="primary" />
                </div>
              ) : (
                <ListGroup variant="flush" className="user-list">
                  {getFilteredUsers().map(user => (
                    <ListGroup.Item 
                      key={user._id} 
                      action 
                      active={selectedUser?._id === user._id}
                      onClick={() => handleUserSelect(user)}
                      className="d-flex align-items-center py-3"
                    >
                      <div className="user-avatar me-3" style={{ 
                        backgroundColor: user.role === 'vendor' ? '#28a745' : 
                                        user.role === 'delivery' ? '#fd7e14' : '#0d6efd' 
                      }}>
                        {getUserIcon(user.role)}
                      </div>
                      <div>
                        <div className="d-flex align-items-center">
                          <div className="fw-bold">{getUserDisplayName(user)}</div>
                          <Badge 
                            bg={getUserBadgeVariant(user.role)} 
                            className="ms-2"
                          >
                            {user.role.charAt(0).toUpperCase() + user.role.slice(1)}
                          </Badge>
                        </div>
                        <small className="text-muted">{user.email}</small>
                      </div>
                    </ListGroup.Item>
                  ))}
                  
                  {getFilteredUsers().length === 0 && (
                    <ListGroup.Item className="text-center py-4">
                      <div className="text-muted">No {activeTab} found</div>
                    </ListGroup.Item>
                  )}
                </ListGroup>
              )}
            </Card.Body>
          </Card>
        </Col>
        
        <Col md={8} lg={9}>
          <Card className="h-100">
            {selectedUser ? (
              <>
                <Card.Header className="d-flex align-items-center">
                  <div className="user-avatar me-3" style={{ 
                    backgroundColor: selectedUser.role === 'vendor' ? '#28a745' : 
                                    selectedUser.role === 'delivery' ? '#fd7e14' : '#0d6efd' 
                  }}>
                    {getUserIcon(selectedUser.role)}
                  </div>
                  <div>
                    <div className="fw-bold">{getUserDisplayName(selectedUser)}</div>
                    <div className="small">
                      <Badge 
                        bg={getUserBadgeVariant(selectedUser.role)} 
                        className="me-2"
                        style={{ opacity: 0.8 }}
                      >
                        {selectedUser.role.charAt(0).toUpperCase() + selectedUser.role.slice(1)}
                      </Badge>
                      {selectedUser.email}
                    </div>
                  </div>
                </Card.Header>
                
                <Card.Body className="p-0 d-flex flex-column">
                  <div 
                    className="chat-messages p-3 flex-grow-1"
                    style={{ overflowY: 'auto', maxHeight: 'calc(100vh - 300px)' }}
                    ref={chatContainerRef}
                  >
                    {messagesLoading ? (
                      <div className="text-center py-4">
                        <Spinner animation="border" variant="primary" />
                      </div>
                    ) : messages.length === 0 ? (
                      <Alert variant="info" className="text-center">
                        No messages yet. Start the conversation!
                      </Alert>
                    ) : (
                      messages.map((message, index) => {
                        const isAdmin = isAdminMessage(message);
                        return (
                          <div 
                            key={message._id || index}
                            className={`d-flex ${isAdmin ? 'justify-content-end' : 'justify-content-start'} mb-2`}
                          >
                            <div 
                              className={`message-bubble ${isAdmin ? 'admin-message' : 'user-message'}`}
                              style={{
                                backgroundColor: isAdmin ? '#0d6efd' : '#f0f0f0',
                                color: isAdmin ? 'white' : 'black',
                                borderRadius: '18px',
                                padding: '10px 15px',
                                maxWidth: '70%',
                                position: 'relative'
                              }}
                            >
                              <div>{message.content}</div>
                              <div className="small text-end" style={{ opacity: 0.8 }}>
                                {new Date(message.createdAt).toLocaleTimeString()}
                              </div>
                            </div>
                          </div>
                        );
                      })
                    )}
                    <div ref={messagesEndRef} />
                  </div>
                  
                  <div className="p-3 border-top">
                    <InputGroup>
                      <Form.Control
                        as="textarea"
                        placeholder="Type a message..."
                        value={newMessage}
                        onChange={(e) => setNewMessage(e.target.value)}
                        onKeyPress={handleKeyPress}
                        style={{ resize: 'none', height: '50px' }}
                      />
                      <Button 
                        variant="primary" 
                        onClick={sendMessage}
                        disabled={loading || !newMessage.trim()}
                      >
                        {loading ? (
                          <Spinner animation="border" size="sm" />
                        ) : (
                          <BsSend />
                        )}
                      </Button>
                    </InputGroup>
                  </div>
                </Card.Body>
              </>
            ) : (
              <Card.Body className="text-center p-5">
                <BsChat size={50} className="text-muted mb-3" />
                <h4>Admin Messaging System</h4>
                <p className="text-muted">
                  Select a user from the left sidebar to start messaging.
                </p>
              </Card.Body>
            )}
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

export default AdminMessages;
